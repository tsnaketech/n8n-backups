{
    "createdAt": "2025-06-12T21:46:04.109Z",
    "updatedAt": "2025-06-23T23:00:47.000Z",
    "id": "nz6nXoK7CK1G3rl6",
    "name": "My workflow 3",
    "active": false,
    "isArchived": true,
    "nodes": [
        {
            "parameters": {
                "httpMethod": "POST",
                "path": "tiktok-transform",
                "options": {}
            },
            "id": "e627dbf1-1d36-4f27-851a-cb9d2f8bdd86",
            "name": "Webhook Start",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1.1,
            "position": [
                -1440,
                20
            ],
            "webhookId": "a1b2c3d4-e5f6-7890-abcd-ef1234567890"
        },
        {
            "parameters": {
                "jsCode": "// Validation URL TikTok et clés Azure\nconst data = $input.first().json;\n\nif (!data.url || !data.url.includes('tiktok.com')) {\n  throw new Error('URL TikTok invalide ou manquante');\n}\n\nif (!data.azure_key || !data.azure_endpoint) {\n  throw new Error('Clés Azure manquantes (azure_key, azure_endpoint)');\n}\n\nconst workflowId = `wf_${Date.now()}`;\n\nreturn {\n  tiktok_url: data.url,\n  azure_key: data.azure_key,\n  azure_endpoint: data.azure_endpoint,\n  replicate_token: data.replicate_token || 'YOUR_REPLICATE_TOKEN',\n  workflow_id: workflowId,\n  timestamp: new Date().toISOString()\n};"
            },
            "id": "07f21ecf-0614-4c71-889e-be42d0693527",
            "name": "Validate Input",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -1240,
                200
            ]
        },
        {
            "parameters": {
                "url": "https://tikwm.com/api/",
                "sendQuery": true,
                "queryParameters": {
                    "parameters": [
                        {
                            "name": "url",
                            "value": "={{ $json.tiktok_url }}"
                        },
                        {
                            "name": "hd",
                            "value": "1"
                        }
                    ]
                },
                "options": {}
            },
            "id": "bf7de62c-9d36-4c74-8309-21b2629d2039",
            "name": "Download TikTok",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                -1020,
                200
            ]
        },
        {
            "parameters": {
                "jsCode": "// Traiter réponse TikTok\nconst response = $input.first().json;\nconst prevData = $input.all()[0].json;\n\nif (response.code !== 0) {\n  throw new Error(`Erreur téléchargement: ${response.msg}`);\n}\n\nconst video = response.data;\n\nreturn {\n  ...prevData,\n  video_url: video.hdplay || video.play,\n  video_title: video.title || 'TikTok Video',\n  duration: video.duration || 30,\n  author: video.author?.nickname || 'Unknown'\n};"
            },
            "id": "2584b529-c0d4-478b-ad8a-a955fe91f928",
            "name": "Process Download",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -800,
                200
            ]
        },
        {
            "parameters": {
                "command": "mkdir -p /tmp/{{ $json.workflow_id }} && wget -O /tmp/{{ $json.workflow_id }}/video.mp4 \"{{ $json.video_url }}\""
            },
            "id": "8c12eeff-169f-4e35-84d7-42432d851738",
            "name": "Save Video",
            "type": "n8n-nodes-base.executeCommand",
            "typeVersion": 1,
            "position": [
                -580,
                200
            ]
        },
        {
            "parameters": {
                "command": "ffmpeg -i /tmp/{{ $json.workflow_id }}/video.mp4 -vn -acodec pcm_s16le /tmp/{{ $json.workflow_id }}/audio.wav"
            },
            "id": "535f3b8b-f903-47fa-b18c-9ea7ca2d9bd2",
            "name": "Extract Audio",
            "type": "n8n-nodes-base.executeCommand",
            "typeVersion": 1,
            "position": [
                -360,
                100
            ]
        },
        {
            "parameters": {
                "command": "mkdir -p /tmp/{{ $json.workflow_id }}/frames && ffmpeg -i /tmp/{{ $json.workflow_id }}/video.mp4 -vf fps=1 -t 20 /tmp/{{ $json.workflow_id }}/frames/frame_%03d.png"
            },
            "id": "c0309d23-1742-4d3e-9ed7-f44c8209b9bc",
            "name": "Extract Frames",
            "type": "n8n-nodes-base.executeCommand",
            "typeVersion": 1,
            "position": [
                -360,
                300
            ]
        },
        {
            "parameters": {
                "jsCode": "// Créer liste des frames à traiter\nconst data = $input.first().json;\nconst frameCount = 15; // Optimisé pour les coûts\nconst frames = [];\n\nfor (let i = 1; i <= frameCount; i++) {\n  frames.push({\n    ...data,\n    frame_number: i,\n    frame_path: `/tmp/${data.workflow_id}/frames/frame_${String(i).padStart(3, '0')}.png`,\n    timestamp: (i-1) * 1.0\n  });\n}\n\nreturn frames;"
            },
            "id": "3c827624-4c3b-4f95-adef-9226821a1f23",
            "name": "Prepare Frames",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                -140,
                200
            ]
        },
        {
            "parameters": {
                "url": "={{ $json.azure_endpoint }}/face/v1.0/detect",
                "sendQuery": true,
                "queryParameters": {
                    "parameters": [
                        {
                            "name": "detectionModel",
                            "value": "detection_03"
                        },
                        {
                            "name": "recognitionModel",
                            "value": "recognition_04"
                        },
                        {
                            "name": "returnFaceId",
                            "value": "true"
                        },
                        {
                            "name": "returnFaceLandmarks",
                            "value": "true"
                        },
                        {
                            "name": "returnFaceAttributes",
                            "value": "qualityForRecognition,headPose,blur"
                        }
                    ]
                },
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Ocp-Apim-Subscription-Key",
                            "value": "={{ $json.azure_key }}"
                        },
                        {
                            "name": "Content-Type",
                            "value": "application/json"
                        }
                    ]
                },
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={ \"url\": \"file://\" + $json.frame_path }",
                "options": {
                    "timeout": 30000
                }
            },
            "id": "0c2d4e08-34bf-4f20-844e-73367fd7fa50",
            "name": "Detect Faces",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                80,
                200
            ],
            "continueOnFail": true
        },
        {
            "parameters": {
                "jsCode": "// Traiter détections Azure\nconst items = $input.all();\nconst allFaces = [];\n\nitems.forEach(item => {\n  const frameData = item.json;\n  const faces = Array.isArray(frameData.json) ? frameData.json : [];\n  \n  faces.forEach((face, idx) => {\n    if (face.faceAttributes && \n        (face.faceAttributes.qualityForRecognition === 'high' || \n         face.faceAttributes.qualityForRecognition === 'medium')) {\n      \n      const rect = face.faceRectangle;\n      allFaces.push({\n        frame_number: frameData.frame_number,\n        timestamp: frameData.timestamp,\n        face_id: face.faceId,\n        bbox: rect,\n        center_x: rect.left + rect.width / 2,\n        center_y: rect.top + rect.height / 2,\n        quality: face.faceAttributes.qualityForRecognition,\n        landmarks: face.faceLandmarks,\n        frame_path: frameData.frame_path,\n        workflow_id: frameData.workflow_id\n      });\n    }\n  });\n});\n\n// Grouper par position\nconst speakers = [];\nconst threshold = 100;\n\nallFaces.forEach(face => {\n  let assigned = false;\n  \n  for (let speaker of speakers) {\n    const avgX = speaker.faces.reduce((sum, f) => sum + f.center_x, 0) / speaker.faces.length;\n    const avgY = speaker.faces.reduce((sum, f) => sum + f.center_y, 0) / speaker.faces.length;\n    \n    if (Math.abs(face.center_x - avgX) < threshold && \n        Math.abs(face.center_y - avgY) < threshold) {\n      speaker.faces.push(face);\n      assigned = true;\n      break;\n    }\n  }\n  \n  if (!assigned) {\n    speakers.push({\n      speaker_id: `speaker_${speakers.length}`,\n      faces: [face]\n    });\n  }\n});\n\n// Retourner les meilleurs visages\nreturn speakers\n  .filter(s => s.faces.length >= 2)\n  .map(speaker => {\n    const bestFace = speaker.faces\n      .filter(f => f.quality === 'high')[0] || speaker.faces[0];\n    \n    return {\n      ...bestFace,\n      speaker_id: speaker.speaker_id,\n      total_detections: speaker.faces.length\n    };\n  });"
            },
            "id": "160cef18-b8b9-4852-993e-a08db8ff59c8",
            "name": "Group Speakers",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                300,
                200
            ]
        },
        {
            "parameters": {
                "command": "ffmpeg -i \"{{ $json.frame_path }}\" -vf \"crop={{ Math.round($json.bbox.width * 1.3) }}:{{ Math.round($json.bbox.height * 1.3) }}:{{ Math.round($json.bbox.left - $json.bbox.width * 0.15) }}:{{ Math.round($json.bbox.top - $json.bbox.height * 0.15) }}\" -q:v 2 /tmp/{{ $json.workflow_id }}/face_{{ $json.speaker_id }}.jpg"
            },
            "id": "e5b99ea1-3088-4811-8d0a-d23fa8d22c6a",
            "name": "Extract Face",
            "type": "n8n-nodes-base.executeCommand",
            "typeVersion": 1,
            "position": [
                520,
                200
            ]
        },
        {
            "parameters": {
                "url": "https://api.replicate.com/v1/predictions",
                "sendHeaders": true,
                "headerParameters": {
                    "parameters": [
                        {
                            "name": "Authorization",
                            "value": "Token {{ $json.replicate_token }}"
                        },
                        {
                            "name": "Content-Type",
                            "value": "application/json"
                        }
                    ]
                },
                "sendBody": true,
                "specifyBody": "json",
                "jsonBody": "={\n  \"version\": \"ac732df83cea7fff18b8472768c88ad041fa750ff7682a21affe81863cbe77e4\",\n  \"input\": {\n    \"image\": \"file:///tmp/\" + $json.workflow_id + \"/face_\" + $json.speaker_id + \".jpg\",\n    \"prompt\": \"cute child cartoon character, pixar disney animation style, big expressive eyes, innocent face, 3D rendered, bright colors\",\n    \"negative_prompt\": \"adult, mature, realistic, dark\",\n    \"num_outputs\": 1,\n    \"guidance_scale\": 7.5,\n    \"num_inference_steps\": 20\n  }\n}",
                "options": {
                    "timeout": 120000
                }
            },
            "id": "f6ec2269-0a99-4c4d-9d0f-337d3f13f82c",
            "name": "Transform Avatar",
            "type": "n8n-nodes-base.httpRequest",
            "typeVersion": 4.1,
            "position": [
                740,
                200
            ]
        },
        {
            "parameters": {
                "jsCode": "// Finaliser résultats\nconst results = $input.all();\nconst workflowId = results[0].json.workflow_id;\n\nconst successful = results.filter(r => r.json.output && r.json.output.length > 0);\nconst failed = results.filter(r => !r.json.output || r.json.output.length === 0);\n\nreturn {\n  success: true,\n  workflow_id: workflowId,\n  message: `✅ Transformation terminée! ${successful.length}/${results.length} avatars créés`,\n  \n  results: {\n    successful_transforms: successful.length,\n    failed_transforms: failed.length,\n    total_speakers: results.length\n  },\n  \n  avatars: successful.map(r => ({\n    speaker_id: r.json.speaker_id,\n    avatar_url: r.json.output[0],\n    original_face: `/tmp/${workflowId}/face_${r.json.speaker_id}.jpg`,\n    quality: r.json.quality,\n    detections: r.json.total_detections\n  })),\n  \n  files: {\n    original_video: `/tmp/${workflowId}/video.mp4`,\n    audio: `/tmp/${workflowId}/audio.wav`,\n    frames_folder: `/tmp/${workflowId}/frames/`\n  },\n  \n  cost_estimate: {\n    azure_face_api: `${(results.length * 15 * 0.001).toFixed(3)}€`,\n    replicate_transforms: `${(successful.length * 0.05).toFixed(2)}€`,\n    total: `${((results.length * 15 * 0.001) + (successful.length * 0.05)).toFixed(2)}€`\n  },\n  \n  next_steps: [\n    \"Avatars enfants créés avec succès\",\n    \"Utilisez Wav2Lip pour l'animation lip-sync\",\n    \"Ou intégrez D-ID API pour une solution complète\"\n  ],\n  \n  timestamp: new Date().toISOString()\n};"
            },
            "id": "c2b30061-1089-4b50-b781-a52d75893d19",
            "name": "Finalize Results",
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                960,
                200
            ]
        },
        {
            "parameters": {
                "options": {}
            },
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "typeVersion": 1.1,
            "position": [
                -1440,
                400
            ],
            "id": "4b279cca-6c80-4f15-92f7-d48dccf4221b",
            "name": "When chat message received",
            "webhookId": "c25e2ca1-eefb-4851-8f18-331416ae1d9f"
        }
    ],
    "connections": {
        "Webhook Start": {
            "main": [
                [
                    {
                        "node": "Validate Input",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Validate Input": {
            "main": [
                [
                    {
                        "node": "Download TikTok",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Download TikTok": {
            "main": [
                [
                    {
                        "node": "Process Download",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Process Download": {
            "main": [
                [
                    {
                        "node": "Save Video",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Save Video": {
            "main": [
                [
                    {
                        "node": "Extract Audio",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Extract Frames",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Extract Frames": {
            "main": [
                [
                    {
                        "node": "Prepare Frames",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Prepare Frames": {
            "main": [
                [
                    {
                        "node": "Detect Faces",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Detect Faces": {
            "main": [
                [
                    {
                        "node": "Group Speakers",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Group Speakers": {
            "main": [
                [
                    {
                        "node": "Extract Face",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Extract Face": {
            "main": [
                [
                    {
                        "node": "Transform Avatar",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Transform Avatar": {
            "main": [
                [
                    {
                        "node": "Finalize Results",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "When chat message received": {
            "main": [
                [
                    {
                        "node": "Validate Input",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "settings": {
        "executionOrder": "v1"
    },
    "staticData": null,
    "meta": null,
    "pinData": {},
    "versionId": "449f380b-c968-405a-8125-73598eb663c4",
    "triggerCount": 0,
    "shared": [
        {
            "createdAt": "2025-06-12T21:46:04.114Z",
            "updatedAt": "2025-06-12T21:46:04.114Z",
            "role": "workflow:owner",
            "workflowId": "nz6nXoK7CK1G3rl6",
            "projectId": "lnYpJLFYV8VS8Mcd"
        }
    ],
    "tags": []
}